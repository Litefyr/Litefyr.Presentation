prototype(Litefyr.Presentation:Spacing) < prototype(Neos.Fusion:Component) {
    @propTypes {
        class = ${PropTypes.anyOf( PropTypes.string, PropTypes.arrayOf( PropTypes.any ) )}
        tailwind = ${PropTypes.anyOf( PropTypes.string, PropTypes.arrayOf( PropTypes.any ) )}

        // this defines the max width of the content
        default = ${PropTypes.boolean}
        wide = ${PropTypes.boolean}
        full = ${PropTypes.boolean}

        // Return only the CSS class, not the element
        onlyClass = ${PropTypes.boolean}

        // this defines the horizontal padding (if false, content can touch the edges)
        // auto set based on the width (full = false, wide = false, others true)
        padding = ${PropTypes.oneOf(['auto', 'autoForce', 'force', true, false])}

        width = ${PropTypes.oneOf(['full', 'wide', 'default', '', true, false])}

        tagName = ${PropTypes.string}
        content = ${PropTypes.string}

        augmenter = ${PropTypes.boolean}

        colorGradient = ${PropTypes.any}
    }
    onlyClass = false
    default = true
    wide = false
    full = false
    width = ${this.full ? 'full' : this.wide ? 'wide' : true}
    augmenter = false

    padding = false

    class = null
    tailwind = null
    colorGradient = null
    animationText = null
    animationMedia = null
    animationElements = null
    style = null
    tagName = 'div'

    content = ${this.onlyClass ? null : value}

    @private {
        width = ${Array.indexOf(['wide', 'full', false], props.width) != -1 ? props.width : 'default'}
        class = Neos.Fusion:DataStructure {
            @if.hasTagName = ${props.tagName}
            width = ${private.width ? BEM.modifier('-width', private.width) : null}
            padding = ${props.padding == true || (props.padding == 'auto' && private.width == 'default') ? '-padding' : null}
            paddingForce = ${props.padding == 'force' || (props.padding == 'autoForce' && private.width == 'default') ? '-padding-force' : null}
            customClass = ${props.class}
            tailwindClass = ${Carbon.Tailwind.merge(props.tailwind)}
            colorGradient = ${props.colorGradient ? props.colorGradient.class : null}
            @process.merge = ${Carbon.String.classNames(value)}
        }
        attributes = afx`
            <Neos.Fusion:DataStructure
                @if={props.tagName}
                @ignoreProperties={['tagName', 'width', 'default', 'wide', 'full', 'padding', 'augmenter', 'content', 'tailwind', 'animationText', 'animationMedia', 'animationElements', 'colorGradient']}
                data-animation-text={props.animationText ? props.animationText : null}
                data-animation-media={props.animationMedia ? props.animationMedia : null}
                data-animation-elements={props.animationElements ? props.animationElements : null}
                {...props}
                style={Array.join(Array.filter([props.style, props.colorGradient ? props.colorGradient.style : null]), ';')}
                style.@process={value || null}
                class={private.class}
            />
        `
    }

    renderer = Neos.Fusion:Case {
        onlyClass {
            condition = ${props.onlyClass}
            renderer = ${private.class}
        }
        justTheContent {
            condition = ${!props.tagName}
            renderer = ${props.content}
        }
        isAugmenter {
            condition = ${props.augmenter}
            renderer = Neos.Fusion:Augmenter {
                @apply.attributes = ${private.attributes}
                fallbackTagName = ${props.tagName}
                content = ${props.content}
            }
        }
        hasTagName {
            condition = true
            renderer = Neos.Fusion:Tag {
                tagName = ${props.tagName}
                attributes = ${private.attributes}
                content = ${props.content}
            }
        }
    }

    // This is for tailwind CSS
    // -width--default
    // -width--wide
    // -width--full
}
