prototype(Litefyr.Presentation:Atom.Spacer) < prototype(Neos.Fusion:Component) {
    @propTypes {
        class = ${PropTypes.anyOf( PropTypes.string, PropTypes.arrayOf( PropTypes.string ) )}
        hr = ${PropTypes.boolean}
        inBackend = ${PropTypes.boolean}
        theme = ${PropTypes.oneOf(['main', 'minor', 'minor2', 'gray', 'default', ''])}
    }

    theme = null
    height = null
    hr = true
    removeSpacing = false
    inBackend = false
    useResponsiveScale = false
    scale = 0

    @if.isVisual = ${this.useResponsiveScale ? true : (this.height || this.hr || this.theme)}

    @private {
        scale = Neos.Fusion:Match {
            @subject = ${String.toString(props.hr ? Math.max(-2, props.scale || 0) : props.scale || 0)}
            @default = 'md'
            -4 = '3xs'
            -3 = '2xs'
            -2 = 'xs'
            -1 = 'sm'
            1 = 'lg'
            2 = 'xl'
            3 = '2xl'
            4 = '3xl'
            5 = '4xl'
        }
        height = ${props.hr ? Math.max(2.5, String.toFloat(props.height)) : props.height == 'px' ? 'px' : String.toFloat(props.height)}
        ribbonText = Neos.Fusion:Case {
            removeSpacing {
                condition = ${props.removeSpacing}
                renderer = ${Carbon.Backend.translate('removeSpacing' , 'Remove spacing', [], 'Spacing', 'Litefyr.Presentation')}
            }
            responsiveScale {
                condition = ${props.useResponsiveScale}
                renderer = ${Carbon.Backend.translate('spacing.' + private.scale , private.scale, [], 'Spacing', 'Litefyr.Presentation')}
            }
            height {
                condition = true
                renderer = ${Carbon.Backend.translate('spacingWithPixel', '{0} pixel spacing', [(private.height == 'px' ? 1 : private.height * 4)], 'Main', 'Litefyr.Presentation')}
            }
        }
        heightClass = Neos.Fusion:Case {
            responsiveScale {
                condition = ${props.useResponsiveScale}
                // h-fl-3xs h-fl-2xs h-fl-xs h-fl-sm h-fl-md h-fl-lg h-fl-xl h-fl-2xl h-fl-3xl h-fl-4xl
                renderer = ${'h-fl-' + private.scale}
            }
            height {
                condition = true
                renderer = ${String.indexOf(private.style, '--spacing-md:') == -1 ? 'h-[--spacing] transition-[height]' : 'h-[--spacing] md:h-[--spacing-md] transition-[height]'}
            }
        }
        marginClass = Neos.Fusion:Case {
            // We need a minimal height of 4px to make the animation work
            @process.minHeight = ${[value, props.animationMedia ? 'min-h-[hr-min-h]' : null]}

            responsiveScale {
                condition = ${props.useResponsiveScale}
                // py-fl-3xs py-fl-2xs py-fl-xs py-fl-sm py-fl-md py-fl-lg py-fl-xl py-fl-2xl py-fl-3xl py-fl-4xl
                renderer = ${'py-fl-' + private.scale}
            }
            height {
                condition = true
                renderer = ${'py-[--spacing] transition-[margin]' + (String.indexOf(private.style, '--spacing-md:') == -1 ? '' : ' md:py-[--spacing-md]')}
            }
        }

        style = Neos.Fusion:Case {
            isZero {
                condition = ${!private.height}
                renderer = '--spacing:0'
            }
            isPx {
                condition = ${private.height == 'px'}
                renderer = '--spacing:1px'
            }
            below20 {
                condition = ${private.height < 20}
                renderer = ${'--spacing:' + (private.height / 4) + 'rem'}
            }
            responsive {
                condition = true
                renderer = Neos.Fusion:Value {
                    md = ${private.height / 4}
                    default = ${Math.max(this.md / 2, 4)}
                    value = ${'--spacing:' + this.default + 'rem;--spacing-md:' + this.md + 'rem'}
                }
            }
        }
        elementClass = ${Presentation.cssClass("spacer")}
        backendRibbon = afx`<Litefyr.Presentation:Atom.BackendRibbon @if={props.inBackend} content={private.ribbonText} />`
    }

    renderer = afx`
        <div @if={props.removeSpacing} class={[Presentation.cssClass("no-space"), props.inBackend ? 'relative' : null]} aria-hidden="true">{private.backendRibbon}</div>
        <!-- Colored spacer -->
        <Carbon.Eel:Tag
            @if={props.theme && !props.hr && !props.removeSpacing}
            tagName={props.inBackend ? 'div' : null}
            attributes.class={[private.elementClass, 'relative clippath-nesting']}

        >
            {private.backendRibbon}
            <hr
                data-theme={props.theme}
                style={props.useResponsiveScale ? null : private.style}
                class={[private.elementClass, Presentation.clippathClass("content", "contentbox"), Tailwind.merge("border-0 bg-theme-back", private.heightClass, props.class)]}
                data-animation-media={props.animationMedia}
            />
        </Carbon.Eel:Tag>

        <!-- HR Element -->
        <Litefyr.Presentation:Spacing @if={props.hr && !props.removeSpacing} class={private.elementClass} width={props.hrWidth} augmenter>
            {private.backendRibbon}
            <hr
                data-animation-media={props.animationMedia}
                data-animation-media-offset={props.animationMedia ? '100px' : null}
                data-theme={props.theme || null}
                style={props.useResponsiveScale ? null : private.style}
                class={["theme-hr", Tailwind.merge(private.marginClass, props.class)]}
            />
        </Litefyr.Presentation:Spacing>

        <!-- Empty spacer -->
        <div
            @if={!props.theme && !props.hr && !props.removeSpacing}
            class={[private.elementClass, Tailwind.merge(private.heightClass, props.class)]}
            style={props.useResponsiveScale ? null : private.style}
            aria-hidden="true"
        >
            {private.backendRibbon}
        </div>
    `
}
