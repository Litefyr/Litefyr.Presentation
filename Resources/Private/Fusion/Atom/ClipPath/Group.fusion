prototype(Litespeed.Presentation:Atom.Clippath.Group) < prototype(Litespeed.Presentation:Atom.Clippath.Component) {
    @propTypes {
        content = ${PropTypes.string}
        theme = ${PropTypes.oneOf(['main', 'minor', 'minor2', 'gray', 'default', 'header', 'footer', ''])}
        class = ${PropTypes.anyOf( PropTypes.string, PropTypes.arrayOf( PropTypes.string ) )}
        wrapClass = ${PropTypes.anyOf( PropTypes.string, PropTypes.arrayOf( PropTypes.string ) )}
        height = ${PropTypes.anyOf( PropTypes.string, PropTypes.arrayOf( PropTypes.string ) )}
    }

    topClass = ${this.class}
    fillerClass = ${this.class}
    bottomClass = ${this.class}
    ariaHidden = ${!this.content}

    renderer = afx`
        <Carbon.Eel:Tag
            tagName={props.wrapClass ? 'div' : null}
            attributes.class={props.wrapClass}
            attributes.aria-hidden={props.ariaHidden ? 'true' : null}
            attributes.data-theme={props.theme}
        >
            <Litespeed.Presentation:Atom.Clippath.Top
                theme={props.wrapClass ? null : props.theme}
                class={props.topClass}
                ariaHidden={props.wrapClass && props.ariaHidden ? false : true}
            />
            <Litespeed.Presentation:Atom.Clippath.Filler
                theme={props.wrapClass ? null : props.theme}
                class={props.fillerClass}
                height={props.height}
                content={props.content}
                ariaHidden={props.wrapClass ? null : props.ariaHidden}
            />
            <Litespeed.Presentation:Atom.Clippath.Bottom
                theme={props.wrapClass ? null : props.theme}
                class={props.bottomClass}
                ariaHidden={props.wrapClass && props.ariaHidden ? false : true}
            />
        </Carbon.Eel:Tag>
    `
}
