prototype(Litefyr.Presentation:Helper.SocialNetworks) < prototype(Neos.Fusion:Component) {
    @propTypes {
        socialNetworks = PropTypes:Array {
            type = PropTypes:DataStructure {
                network = PropTypes:String
                url = PropTypes:String
            }
        }
        email = ${PropTypes.string}
        phone = ${PropTypes.string}
        mobile = ${PropTypes.string}
        website = ${PropTypes.string}
        vcard = ${PropTypes.string}
        plural = ${PropTypes.boolean}
        formal = ${PropTypes.boolean}
        additionalLinks = ${PropTypes.arrayOf(PropTypes.oneOf(['email', 'phone', 'mobile', 'website', 'vcard']))}
    }

    additionalLinks = ${['email', 'phone', 'mobile', 'vcard']}
    plural = true
    formal = true

    @private {
        additionalLinks = Neos.Fusion:Map {
            items = ${props.additionalLinks || []}
            itemRenderer = Neos.Fusion:DataStructure {
                network = ${item}
                url = ${props[item]}
            }
            @process.values = ${Array.values(value)}
        }
        networks = ${Array.filter(Array.concat(props.socialNetworks || [], private.additionalLinks), (item) => !!(item.network && item.url))}
    }

    renderer = Neos.Fusion:Map {
        @process.filter = ${Array.filter(value)}
        @if.hasNetworks = ${Carbon.Array.check(private.networks)}
        items = ${private.networks}
        itemRenderer = Litefyr.Presentation:Helper.SocialNetwork {
            plural = ${props.plural}
            formal = ${props.formal}
            network = ${item.network}
            url = ${item.url}
            plainLabel = false
        }
    }
}
