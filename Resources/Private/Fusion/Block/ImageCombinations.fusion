prototype(Litefyr.Presentation:Block.ImageCombinations) < prototype(Neos.Fusion:Component) {
    enableText = false
    textBoxDirection = null
    textBoxText = null
    textBoxMaxWidth = null
    textBoxBreakpoint = null
    enableSpacing = null
    breakout = null
    screenHeight = null

    @private {
        hasTextbox = ${props.textBoxDirection && props.textBoxText}
        textWithContentImage = afx`
            <Litefyr.Presentation:Atom.Image
                @if={!private.hasTextbox}
                {...props}
                screenHeightBreakpoint="md"
                objectFit="cover"
                breakout={null}
                rounded={false}
                animationMedia={null}
            />
            <Litefyr.Presentation:Block.ImageWithTextOverlay
                @if={private.hasTextbox}
                {...props}
                enableSpacing={false}
                screenHeightBreakpoint="md"
                objectFit="cover"
                breakout={null}
                rounded={false}
                boxDirection={props.textBoxDirection}
                boxMaxWidth={props.textBoxMaxWidth}
                boxBreakpoint={props.textBoxBreakpoint}
                text={props.textBoxText}
                animationMedia={null}
            />
        `
    }

    renderer = Neos.Fusion:Case {
        enableText {
            condition = ${props.enableText}
            renderer = afx`
                <Litefyr.Presentation:Module.TextWithContent
                    {...props}
                    breakpoint="md"
                    screenHeight={null}
                    singleContent={private.textWithContentImage}
                    stretchContent={true}
                />
            `
        }
        textBox {
            condition = ${private.hasTextbox}
            renderer = afx`
                <Litefyr.Presentation:Block.ImageWithTextOverlay
                    {...props}
                    boxDirection={props.textBoxDirection}
                    boxMaxWidth={props.textBoxMaxWidth}
                    boxBreakpoint={props.textBoxBreakpoint}
                    text={props.textBoxText}
                />
            `
        }
        default {
            condition = true
            renderer = afx`
                <Litefyr.Presentation:Spacing
                    augmenter
                    width={props.enableSpacing ? props.breakout : false}
                    padding="auto"
                    tailwind="mediacontent"
                    animationMedia={props.animationMedia}
                >
                    <Litefyr.Presentation:Atom.Image objectFit={props.screenHeight ? "cover" : null} {...props} />
                </Litefyr.Presentation:Spacing>
            `
        }
    }
}
