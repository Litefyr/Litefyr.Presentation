prototype(Litefyr.Presentation:Module.TextWithContent) < prototype(Neos.Fusion:Component) {
    @propTypes {
        label = ${PropTypes.string}
        headline = ${PropTypes.string}
        breakout = ${PropTypes.oneOf(['', 'wide', 'full'])}
        textLeft = ${PropTypes.boolean}
        isFirstElement = ${PropTypes.boolean}
        stretchContent = ${PropTypes.boolean}
        inSlider = ${PropTypes.boolean}
        theme = ${PropTypes.oneOf(['main', 'minor', 'minor2', 'gray', 'default', 'inverted', ''])}
        text = ${PropTypes.string}
        links = ${PropTypes.string}
        content = ${PropTypes.anyOf( PropTypes.string, PropTypes.oneOf([false]))}
        singleContent = ${PropTypes.anyOf( PropTypes.string, PropTypes.oneOf([false]))}
        aside = ${PropTypes.string}
        asideOnEnd = ${PropTypes.string}
        variant = ${PropTypes.string}
        align = ${PropTypes.oneOf(['stretch', 'start', 'center', 'end', 'baseline'])}
        leftColSize = ${PropTypes.integer}
        breakpoint = ${PropTypes.oneOf(['sm', 'md', 'lg', 'xl'])}
        contentClass = ${PropTypes.anyOf( PropTypes.string, PropTypes.arrayOf( PropTypes.string ) )}
        wrapperClass = ${PropTypes.anyOf( PropTypes.string, PropTypes.arrayOf( PropTypes.string ) )}
        textClass = ${PropTypes.anyOf( PropTypes.string, PropTypes.arrayOf( PropTypes.string ) )}
        fullArea = ${PropTypes.oneOf([true, false, 'padding', 'padding-x', 'padding-y', ''])}
        float = ${PropTypes.boolean}
        textMobileBottom = ${PropTypes.boolean}
    }

    @styleguide {
        props {
            headline = Sitegeist.ChitChat:Line {
                length = 50
            }
            breakout = 'wide'
            textLeft = false
            theme = 'main'
            text = Sitegeist.ChitChat:Line {
                length = 200
            }
            align = 'center'
            leftColSize = 50
            content = Carbon.Image:Component.Presentation.Image {
                imageSource = Carbon.Image:Helper.ImageSource {
                    outputDummy = true
                }
            }
        }
    }

    float = false
    circleShapeOutside = false
    textMobileBottom = false
    breakout = null
    headline = null
    variant = null
    aside = null
    singleContent = null
    wrapperClass = null
    leftColSize = null
    textClass = null
    theme = null
    contentClass = null
    text = null
    links = null
    asideOnEnd = null
    label = null
    animationText = null
    animationMedia = null
    animationElements = null
    isFirstElement = false
    textLeft = false
    enableHeadline = true
    headlineFontSize = 0
    align = 'center'
    breakpoint = 'md'

    inBackend = false
    stretchContent = false
    screenHeight = 0
    fullArea = ${!this.content && this.singleContent && this.breakout == 'full'}

    @private {
        bemClass = ${!!props.float ? '-two-cols-float' : '-two-cols-grid'}
        fullBreakout = ${props.breakout == 'full'}
        hasTheme = ${props.theme && props.theme != 'default'}
        isMultipleContent = ${props.content && !props.singleContent}
        contentType = ${private.isMultipleContent ? 'multiple' : 'single'}

        // Col size
        leftColSize = ${props.leftColSize ||  50}
        ratioLeft = ${private.leftColSize / 100}
        ratioRight = ${(100 - private.leftColSize) / 100}

        // Wrapper classes
        wrappingBem = Carbon.Eel:BEM {
            block = ${private.bemClass}
            modifier = Neos.Fusion:DataStructure {
                text-mobile-bottom = ${props.textMobileBottom}
                breakpoint = ${props.breakpoint}
                textleft = ${props.textLeft ? 'left' : 'right'}
                variant = ${props.variant}
                min-h = ${!!props.float && !!props.screenHeight}
                gridOnly = Neos.Fusion:DataStructure {
                    @if.set = ${!props.float}
                    rounded = ${'rounded-' + (props.breakout || 'narrow')}
                    rounded.@if.set = ${private.isMultipleContent || !private.fullBreakout || !private.hasTheme}
                    breakout = ${props.breakout || 'narrow'}
                    type = ${private.contentType}
                }
            }
        }

        wrappingClass = Neos.Fusion:DataStructure {
            wrapperClass = ${props.wrapperClass}
            base = 'px-safe overflow-x-clip'
            background = ${private.hasTheme ? 'bg-theme-back' : null}
            align = Neos.Fusion:Match {
                @if.noFloat = ${!props.float}
                @subject = ${props.align || 'center'}
                @default = ''
                stretch = 'items-stretch'
                start = 'items-start'
                center = 'items-center'
                end = 'items-end'
                baseline = 'items-baseline'
            }
        }

        // Text classes
        textClass = ${['text-theme-front first:*:mt-0 last:*:mb-0', props.textClass]}

        // Content BEM class
        contentBem = Carbon.Eel:BEM {
            block = ${private.bemClass}
            element = 'content'
            modifier = Neos.Fusion:DataStructure {
                circle-shape-outside = ${!!props.float && !!props.circleShapeOutside}
                gridOnly = Neos.Fusion:DataStructure {
                    @if.set = ${!props.float}
                    type = ${private.contentType}
                    full = ${!!props.fullArea}
                    min-h = ${!!props.screenHeight}
                    padding-horizontal = ${props.fullArea == 'padding' || props.fullArea == 'padding-x'}
                    padding-vertical = ${!!(props.fullArea == 'padding' || props.fullArea == 'padding-y') || !private.fullBreakout && !!private.hasTheme}
                    stretch = ${private.isMultipleContent ? true : !!(private.fullBreakout && !!private.hasTheme)}
                    stretch.@if.set = ${!props.float && (props.stretchContent || props.align == 'stretch')}
                }
            }
        }

        content = afx`
            <Neos.Fusion:Augmenter
                content={props.content ? props.content : props.singleContent}
                data-animation-media={props.animationMedia}
                data-animation-elements={props.animationElements}
                class={[private.contentBem, 'roundimage', Tailwind.merge('isolate', props.contentClass)]}
            />
            <Litefyr.Presentation:Spacing
                class={BEM.string(private.bemClass, 'text')}
                tailwind={private.textClass}
                width={private.fullBreakout ? 'wide' : props.breakout}
                animationText={props.animationText}
            >
                <Litefyr.Presentation:Atom.HeadlineAndLabel
                    @if={props.enableHeadline}
                    isFirstElement={props.isFirstElement}
                    inBackend={props.inBackend}
                    content={props.headline}
                    fontSize={props.headlineFontSize}
                    label={props.label}
                    marginBottom={props.text || props.aside || props.links || props.asideOnEnd}
                />
                <div @if={props.text} class="prose">
                    {props.text}
                </div>
                {props.aside}
                <Neos.Fusion:Augmenter @if={props.links} class="mt-4" content={props.links} />
                {props.asideOnEnd}
            </Litefyr.Presentation:Spacing>
        `
        screenHeightStyle = ${props.screenHeight ? '--element-min-h:' + props.screenHeight + 'vh;' : ''}
    }

    renderer = afx`
        <Litefyr.Presentation:Background
            @if={props.float}
            theme={props.theme}
            style={private.screenHeightStyle + '--width:' + (props.textLeft ? private.ratioRight : private.ratioLeft) * 100 + '%'}
            tailwind={private.wrappingClass}
            class={private.wrappingBem}
        >
            <Litefyr.Presentation:Spacing
                width={props.breakout}
                content={private.content}
                padding
            />
        </Litefyr.Presentation:Background>
        <Litefyr.Presentation:Background
            @if={!props.float}
            theme={props.theme}
            style={private.screenHeightStyle + '--ratio-left:' + private.ratioLeft + ';--ratio-right:' + private.ratioRight}
            class={private.wrappingBem}
            tailwind={private.wrappingClass}
            content={private.content}
        />
    `
}
