prototype(Litefyr.Presentation:Module.TeaserContainer) < prototype(Neos.Fusion:Component) {
    @propTypes {
        headline = ${PropTypes.string}
        text = ${PropTypes.string}
        links = ${PropTypes.string}
        inBackend = ${PropTypes.boolean}
        jsonPath = ${PropTypes.anyOf( PropTypes.string, PropTypes.arrayOf( PropTypes.string ) )}
        content = ${PropTypes.string}
        label = ${PropTypes.string}
        gap = PropTypes:DataStructure {
            image = ${PropTypes.string}
            plain = ${PropTypes.string}
        }
        bottomTheme = ${PropTypes.oneOf(['main', 'minor', 'minor2', 'gray', 'default', ''])}
        breakout = ${PropTypes.oneOf(['wide', 'full', ''])}
        limit = ${PropTypes.integer}
        showImages = ${PropTypes.boolean}
    }
    @styleguide {
        props {
            headline = Sitegeist.ChitChat:Line
            text = Sitegeist.ChitChat:Line
            jsonPath = ''
            content = Sitegeist.Monocle:Preview.Prototypes {
                items = 'Litefyr.Presentation:Block.Teaser,Litefyr.Presentation:Block.Teaser,Litefyr.Presentation:Block.Teaser'
            }
        }
    }

    jsonPath = null
    jsonPath.@process {
        convertFromArray = ${Carbon.Array.check(value) ? Array.join(value,'||') : value}
        makeSafeForHomepageWithParamter = ${String.replace(value, '/.json?', '/?json=1&')}
        makeSafeForHomepageNoParamter = ${String.replace(value, '/.json', '/?json=1')}
    }
    links = null
    bottomTheme = 'main'
    count = ''
    limit = 0
    featured = false
    showImages = true
    inBackend = false
    colorGradient = null

    textWrapperClass = 'headline-alignment -links'
    textParagraphClass = 'headline-alignment-margin mt-3 max-w-3xl text-fl-sm text-theme-front sm:mt-4 text-lightness-offset-30 dark:-text-lightness-offset-20'

    gap = Neos.Fusion:DataStructure {
        image = '1rem'
        plain = '1rem'
    }

    @private {
        xData = ${props.jsonPath ? AlpineJS.function('fetch', props.jsonPath, props.inBackend, props.limit) :  null}
        moreText = ${String.replace(props.moreText, '{0}', props.count)}
        style = ${'--content-padding:1rem;--teaser-gap:' + ((props.showImages ? props.gap.image : props.gap.plain) || '1rem')}
        breakout = ${props.breakout == 'full' ? 'full' : 'wide'}
        links = Neos.Fusion:Augmenter {
            @if.set = ${props.links}
            data-animation-text = ${props.animationText}
            class = 'mt-[--content-space-half] headline-alignment-justify'
            content = ${props.links}
        }
    }

    renderer = afx`
        <Litefyr.Presentation:Background
            @if={!props.showImages}
            x-data={private.xData}
            tailwind={[props.bottomTheme ? "bg-theme-back" : null, "print:hidden"]}
            style={private.style}
            tagName="section"
            class={props.bottomTheme && Presentation.clippathClass("content", "padding")}
            data-theme={props.bottomTheme}
        >
            <Litefyr.Presentation:Spacing width={private.breakout} tailwind={props.bottomTheme && "py-[--content-space-half]"} padding colorGradient={props.colorGradient}>
                <div data-animation-text={props.animationText} class={props.textWrapperClass} @if={props.headline || props.text || props.label}>
                    <Litefyr.Presentation:Atom.HeadlineAndLabel
                        content={props.headline}
                        label={props.label}
                        fontSize={props.headlineFontSize}
                        isFirstElement={props.isFirstElement}
                    />
                    <p @if={props.text} class={props.textParagraphClass}>
                        {Presentation.typewriter(props.text, !props.inBackend, 'text-theme-accent')}
                    </p>
                </div>
                <div
                    x-ref={props.jsonPath ? "target" : null}
                    x-show={props.jsonPath ? "!noMarkup" : null}
                    data-animation-elements={props.animationElements}
                    data-animation-elements-watch={props.jsonPath && props.animationElements ? "once" : null}
                    class="mt-[--content-space-half] -mx-[--teaser-gap] flex flex-col gap-y-8 [&_.-teaser]:mx-[--teaser-gap] md:flex-wrap md:justify-center md:flex-row md:*:basis-1/2 md:only:*:!basis-full lg:exactly-4:*:basis-1/2 lg:*:basis-1/3"
                >
                    {props.content}
                </div>
                {private.links}
            </Litefyr.Presentation:Spacing>
        </Litefyr.Presentation:Background>

        <Litefyr.Presentation:Background
            @if={props.showImages}
            x-data={private.xData}
            tailwind={["print:hidden", props.bottomTheme && "relative clippath-preserve"]}
            class={props.bottomTheme && BEM.modifier("teaser-container", props.moreHref && "link")}
            style={private.style}
            tagName="section"
        >
            <Litefyr.Presentation:Spacing
                padding
                width={private.breakout}
            >
                <div class={props.textWrapperClass} data-animation-text={props.animationText} @if={props.headline || props.text || props.label}>
                    <Litefyr.Presentation:Atom.HeadlineAndLabel
                        content={props.headline}
                        label={props.label}
                        fontSize={props.headlineFontSize}
                        isFirstElement={props.isFirstElement}
                    />
                    <p @if={props.text} class={props.textParagraphClass}>
                        {Presentation.typewriter(props.text, !props.inBackend, 'text-theme-front text-lightness-offset-0')}
                    </p>
                </div>
                <!-- Content START -->
                <template @if={props.inBackend && props.jsonPath} x-if="noMarkup">
                    <Carbon.Notification:Tag content={Translation.translate('noPagesWithImagesFound', null, [], 'Main', 'Litefyr.Presentation')} />
                </template>
                <div
                    x-ref={props.jsonPath ? "target" : null}
                    x-show={props.jsonPath ? "!noMarkup" : null}
                    class={[props.featured ? "md:first:at-least-3:*:!basis-full lg:first:*:basis-1/2 *:nth lg:second:*:basis-1/2 lg:third:*:basis-1/2" : "lg:exactly-4:*:basis-1/2", "mt-[--content-space-half] -mx-[--teaser-gap] flex flex-col gap-y-8 [&_.-teaser]:mx-4 md:flex-wrap md:justify-center md:flex-row md:*:basis-1/2 lg:*:basis-1/3 md:only:*:!basis-full"]}
                    data-animation-elements={props.animationElements}
                    data-animation-elements-watch={props.jsonPath && props.animationElements ? "once" : null}
                >
                    {props.content}
                </div>
                {private.links}
                <!-- Content END -->
            </Litefyr.Presentation:Spacing>
            <div
                @if={props.bottomTheme}
                data-theme={props.bottomTheme}
                class={[Presentation.clippathClass("content", "contentbox"), "teaser-container__bottom bg-theme-back"]}
                aria-hidden="true"
            ></div>
        </Litefyr.Presentation:Background>
    `
}
